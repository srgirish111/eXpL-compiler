when error is recognised display line number

a function should not access avriables out of its scope (do you need to implement it in any way)?

If a variable/function is declared multiple times, a compilation error should result.

Every declared function must have exactly one definition. The compiler should report error otherwise.

ExpL is strongly typed and any type mismatch or scope violation must be reported at compile time.

(“hello”==a and "hello" < a) are a valid logical expressions provided, a is a variable of string type. 
(p==q) is a valid logical expression provided p and q are variables of the same type.
/////////////////////////////////////////////////
The statements inside an if-block may be conditional, iterative, assignment, input/output, break or continue statements, but not the return statement.

The statements inside a while-block may be conditional, iterative, assignment, input/output, break or continue statements, but not the return statement.

The body of each function (including main) should have exactly one return statement and it should be the last statement in the body.

FROM THE ABOVE THREE STATEMENTS WHY IS THERE A PROBLEM WITH RETURN STATEMENTS
///////////////////////////////////////////////////////

If the return type of the function does not match the type of the expression/variable returned, a compilation error should occur.


///
have to do typecheck separately for each production
or
set a flag for infield which does type check only when flag is 0
//











multiple declarations of a function should give an error --> ^__^
declaration and no definition of a function and theres a function call it should give an error --->
sol: use size as flag for functions
